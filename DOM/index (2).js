//Manipular Los Elementos
//Podemos seleccionar los elementos HTML desde la consola y, luego, acceder a sus Propiedades para modificar sus valores a trav√©s del comando querySelector.

//Paso A Paso

//Para seleccionar un elemento desde la consola (o desde el script), debemos escribir document.querySelector().

document.querySelector()//: Es uno de los m√©todos para seleccionar un elemento. Devuelve solo el primer elemento que coincida con el selector CSS dado. El t√©rmino ‚ÄúQuery Selector‚Äù viene del ingl√©s ‚Äúconsulta por selector‚Äù.

//Veamos un ejemplo. Para seleccionar el elemento h1, escribimos:

document.querySelector("h1") // Selecciona el primer "h1" que encuentra en el documento
//Luego, si deseamos cambiar el color de la tipograf√≠a a lima (lime):

document.querySelector("h1").style.color = "lime"
"lime"
//Por √∫ltimo, podemos guardar esta referencia en una Variable:

document.querySelector(".ejemplo_clase")
let parrafo = document.querySelector(".ejemplo_clase")
//Si ahora quisi√©ramos cambiar el color de la tipograf√≠a a rojo (red):

parrafo.style.color = "red"
"red"
//Record√°: En JavaScript no se usan guiones, se usa üê™ camelCase.

//Repaso: Selectores CSS
//Abr√≠ esta p√°gina, luego abr√≠ la consola JavaScript y prest√° atenci√≥n a qu√© selecciona cada uno de estos comandos:

document.body
document.querySelector('p')
document.querySelector('#primary')
document.querySelector('.important')
document.querySelector('p.important')
document.querySelector('#nav ol li')
document.querySelector('h1, p')

(-----------------------------------)

//Manipular El Estilo
//Si quisi√©ramos modificar las Propiedades de un documento, podr√≠amos seleccionar un elemento con un querySelector y, luego, modificar su estilo. Sin embargo, esto es poco escalable.

//La alternativa m√°s pr√°ctica es definir una Clase con todas las propiedades CSS y aplicarla usando JavaScript. Para eso, usaremos un m√©todo llamado classList, en el que seleccionamos un elemento y le agregamos una Clase determinada pas√°ndola como valor.

//Record√°: En vez de cambiar todas las Propiedades del estilo desde JavaScript, la forma m√°s escalable de hacerlo es a trav√©s de la Clase en el documento CSS.

//La Propiedad classList nos permite acceder a las Clases presentes en un elemento. A su vez, podemos combinarlo con ciertos m√©todos para manipular el estilo.

//Veamos un ejemplo:

h2.classList.add("importante")
//En este caso, le agregamos la Clase importante a un <h2> utilizando el m√©todo add (del ingl√©s "agregar").

//classList es una Funci√≥n que toma como valor el nombre de una Clase. Por lo tanto, no hace falta ponerle el punto adelante (.importante).

//De la misma manera, podr√≠amos suprimir la Clase importante utilizando el m√©todo remove (del ingl√©s "quitar"):

h2.classList.remove("importante")
//Tambi√©n hay un m√©todo llamado toggle (del ingl√©s "alternar") que cambia entre sacar y agregar la Clase. En otras palabras, si la Clase est√° presente, toggle la quita; si est√° ausente, la agrega:

h2.classList.toggle("importante")
//classList: M√©todos M√°s Usados

//‚òëÔ∏è add: Agrega una Clase al elemento HTML. Si ya lo tiene, lo ignora.

//‚òëÔ∏è remove: Suprime una Clase al elemento HTML. Si no lo tiene, lo ignora.

//‚òëÔ∏è toggle: Agrega o suprime una Clase (si lo tiene, lo quita; si no lo tiene, lo agrega).

//‚òëÔ∏è item: Obtiene una Clase por √≠ndice.

//‚òëÔ∏è contains: Valida si una Clase espec√≠fica est√° presente o no.

//‚òëÔ∏è replace: Reemplaza una Clase por la otra.

//‚ö†Ô∏è Importante: Para nombrar una Clase, no uses t√©rminos que sean palabras reservadas (por ejemplo, usar "purple" cuando ya est√° reservada para el color). De esta manera, evitar√°s errores y confusi√≥n.

(----------------------------------)

//Manipular El Texto Y Contenido
//Adem√°s de manipular los estilos, podemos manipular los textos del HTML. Para eso, usaremos las Propiedades textContent (del ingl√©s ‚Äúcontenido de texto‚Äù) y innerHTML.

//‚ö†Ô∏è Importante: La propiedad textContent es para todos los elementos o tags HTML que muestren texto (h1, <span>, <p>).

//Veamos un ejemplo. Si quisi√©ramos modificar el texto presente en h1 ("primer h1!"), primero definimos la Variable y luego utilizamos textContent:

let h1 = document.querySelector("h1")
h1
h1.textContent = "¬°Hola!"

//Ahora, supongamos que quisi√©ramos agregar un tag <p> al texto:

h1.textContent = "<p>¬°Hola!</p>" // Se modifica de manera literal, no interpreta si hay tags.

//Se modifica el contenido de la etiqueta (o elemento HTML) de manera literal.

//üõé Record√°: En HTML, los tags pueden contener texto, otro tag o una combinaci√≥n de ambos.

//Por lo tanto, si quisi√©ramos modificar el contenido de HTML de un documento, debemos usar innerHTML. Este devuelve el texto contenido en las etiquetas HTML. De esta manera, interpretar√° cada tag y lo traducir√° en la pantalla.

h1.innerHTML = "<p>¬°Hola!<p>"

//En s√≠ntesis, con la Propiedad textContent podemos modificar todos los elementos o tags HTML que muestren texto. Con innerHTML, podemos modificar el contenido del tag; por ejemplo, reemplaz√°ndolo por otro tag.


//Si un elemento HTML tiene contenido y no quer√©s que lo pise, pod√©s usar:

let h1 = document.querySelector("h1")
h1.textContent += "Esto se agrega a lo que ya tiene por el +="

(---------------------------)

//Manipular Los Atributos De Un Elemento
//Adem√°s de manipular elementos, estilos y contenido, podemos modificar los atributos de un elemento en HTML.

//¬øQu√© Son Los Atributos?

//Seg√∫n Mozilla, "los elementos en HTML tienen atributos; estos son valores adicionales que configuran los elementos o ajustan su comportamiento de diversas formas para cumplir los criterios de los usuarios". Un atributo puede ser el src (source) de una imagen, el href de un hiperv√≠nculo, etc.


//El m√©todo getAttribute() nos devuelve el valor del atributo especificado. Con el m√©todo setAttribute() definiremos un valor para el atributo.

//Veamos un ejemplo. Supongamos que tenemos el siguiente tag:

<a href="http://www.google.com" id="btn-google">Ir a Google</a>
//Por ahora el link nos lleva a www.google.com, pero queremos modificarlo por www.plataforma5.la. Para hacerlo, primero debemos usar el m√©todo querySelector desde JavaScript:

let botonGoogle = document.querySelector("#btn-google");
//Luego, usaremos getAttribute() y setAttribute():

botonGoogle.getAttribute("href") // Nos muestra cu√°l es el valor del atributo href.

botonGoogle.setAttribute("href", "http://www.plataforma5.la") // Cambia el valor del atributo href por el valor que se pasa como segundo Par√°metro.
//De esta manera, reemplazamos un atributo href por el otro.

//Por √∫ltimo, si quisi√©ramos cambiar el texto "Ir a Google", debemos usar textContent:

botonGoogle.textContent = "Ir a Plataforma 5"
//Veamos otro ejemplo. Supongamos que queremos reemplazar una imagen por otra:

<img src="logo.png">
let logo=document.querySelector("img")
logo.getAttribute("src") // "logo.png"
logo.setAttribute("src", "http://vignette1.wikia.nocookie.net/sanicsource/images/9/97/Doge.jpg")

{/* üõé Record√°: src es una Propiedad del Objeto img que tiene como valor una direcci√≥n en donde est√° alojada la imagen. */}

(----------------------------------)

{/* Manipular Varios Elementos
Hasta ahora, aprendimos a usar querySelector() para modificar elementos espec√≠ficos. Sin embargo, este m√©todo solo trae el primer elemento de un tipo.

Para seleccionar varios elementos al mismo tiempo, existe el m√©todo querySelectorAll().

üìö querySelectorAll() devuelve un Node list (lista de nodos) de todos los elementos que coincidan con el selector.

Diferencias entre Node list y Arreglo

El m√©todo querySelectorAll() no devuelve un Arreglo, sino un Node list. Para entender la diferencia entre ambos, hac√© click ac√°. */}

{/* Recapitulando, si utilizamos querySelector("a"), solamente nos trae el primer link: */}

document.querySelector("a") // Solamente nos trae el primer link
{/* En cambio, querySelectorAll("a") nos devuelve una lista de nodos con todos los elementos de este tipo: */}

document.querySelectorAll("a") {/* // Nos devuelve una lista de nodos con todos los elementos de este tipo
Ahora bien, si quisi√©ramos modificar todos los links de nuestra p√°gina, no podremos hacerlo usando setAttribute(), ya que solo funciona sobre Objetos (no listas). Por eso, deber√°s recorrerlo usando un loop. */}

{/* Para eso, segu√≠ estos pasos:

Guard√° la lista de nodos en una Variable. */}

let todosLosLinks = document.querySelectorAll("a")

{/* Recorr√© la Variable con un loop, de modo tal que, en cada vuelta, se modifique con setAttibute. */}
for (let i = 0; i < todosLosLinks.length; i++) {
todosLosLinks[i].setAttribute("href", "http://www.plataforma5.la")
}
{/* üõé Record√°: Es una convenci√≥n usar las letras "i" o "j" para los contadores.
 */}
{/* Ejercicio
Retomando el ejemplo anterior, supongamos que ahora queremos cambiar el texto de los p√°rrafos.

Pens√° c√≥mo podr√≠as hacerlo y prob√° el c√≥digo en tu consola antes de mirar la soluci√≥n.

 */}
let parrafos = document.querySelectorAll("p")

for (let i = 0; i < parrafos.length; i++) {
parrafos[i].textContent = "Parrafo " + (i + 1)
}
{/* Deber√≠a quedar: P√°rrafo 1, P√°rrafo 2, P√°rrafo 3, etc. */}

(----------------------)

{/* Crear Elementos
Para crear diferentes elementos y luego a√±adirlos a un documento, debemos usar el m√©todo createElement.

‚ö†Ô∏è Importante: Con createElement se crea un Objeto que luego agregaremos al DOM.

Veamos su sintaxis: */}

let elemento = document.createElement("elemento") {/* // Pasamos un String como par√°metro, que indica qu√© etiqueta queremos crear.
Ahora veamos un ejemplo. Si quisi√©ramos crear una etiqueta h1, primero debemos guardar su referencia en una Variable: */}

let h1 = document.createElement("h1")
{/* Luego, le podemos agregar texto usando textContent: */}

h1.textContent = "Plataforma 5"
{/* Por √∫ltimo, podemos crear un elemento div: */}

let div = document.createElement("div")
{/* Si quer√©s conocer m√°s sobre el m√©todo createElement, acced√© a la documentaci√≥n de Mozilla.

üõé Record√°: Pod√©s ingresar a los distintos nodos y ver c√≥mo son las relaciones entre nodos e hijos. Hac√© click ac√° para aprender m√°s.

En la pr√≥xima secci√≥n, aprender√°s c√≥mo agregar el h1 creado en el div y c√≥mo sumarlos a tu sitio web. */}

(----------------)

{/* Agregar Y Remover Elementos
appendChild
Para agregar un elemento dentro de otro usaremos el m√©todo appendChild. De esta forma, podemos incluir en un nodo un nuevo hijo.

Veamos su sintaxis:
 */}
document.elementoPadre.appendChild(elementoHijo){/*  // Pasamos como par√°metro el Objeto que creamos en el paso anterior

ü§ì Tip: Si quer√©s crear un p√°rrafo nuevo con texto, cre√° el texto como un nodo de Texto que agregar√°s al p√°rrafo. Luego, agreg√° ese p√°rrafo al documento.

‚ö†Ô∏è Importante: Tambi√©n pod√©s usar este m√©todo para mover un elemento, de un elemento a otro.

Para aprender m√°s sobre este m√©todo, acced√© a la documentaci√≥n de Mozilla.

Paso A Paso
Volviendo al ejemplo anterior, si quisi√©ramos agregar el elemento h1 a la Variable div:

La Variable div debe llamar al m√©todo appendChild.
Para ello, el argumento del m√©todo debe ser el elemento a agregar (en este caso, h1).
div.appendChild(h1) // En este caso, h1 es el Objeto creado anteriormente. Por eso no es un String (como en el caso de document.createElement).
üìõ En la consola, comprob√° que el elemento h1 se encuentre dentro del div */}

{/* Luego, agreg√° el div al body, pas√°ndolo como argumento:*/}
document.body.appendChild(div)

{/* removeChild
Para remover un elemento de nuestro sitio web, usamos el m√©todo removeChild.

Veamos su sintaxis: */}

document.ElementoPadre.removeChild(elementoHijo)
{/* Por ejemplo, el siguiente c√≥digo remueve el div del body:
 */}
document.body.removeChild(div)